import csv

#files and their path
students = 'students.csv'
courses = 'courses.csv'
grades = 'grades.csv'

def read_student():
    try:
        with open (students, mode= 'r', newline= '') as file:
            reader = csv.reader(file, delimiter=';')
            student_csv= []
            for data in reader:
                student_csv.append(data)
            return student_csv
    except FileNotFoundError:
        return []
        
def read_courses():
    try:
        with open ( courses, mode= 'r', newline= '') as file:
            reader = csv.reader(file, delimiter= ';')
            courses_csv= []
            for data in reader:
                courses_csv.append(data)
            return courses_csv
    except FileNotFoundError:
        return []
        
def read_grades():
    try:
        with open(grades, mode='r', newline='') as file:
            reader = csv.reader(file, delimiter=';')
            grades_csv = []
            for data in reader:
                grades_csv.append(data)
            return grades_csv
    except FileNotFoundError:
        return []
        
def display_OGstudents(database):
    print("\nStudents:")
    for data in database:
        s_id, last_name, first_name, phone, email = data
        print(f" {s_id}; {last_name}; {first_name}; {phone}; {email}")
        
def list_students_sorted(database, reverse=False):
    sorted_students = sorted(database, key=lambda x: x[2], reverse=reverse)
    
    print("\nSorted Students:\n")
    for student in sorted_students:
        s_id, last_name, first_name, phone, email = student
        print(f"ID: {s_id}, Name: {last_name} {first_name}, Phone: {phone}, Email: {email}")
        
def display_OGcourses(database):
    print("\nCourses:")
    for data in database:
        c_title, c_semester, c_code = data
        print(f"{c_title}; {c_semester}; {c_code}")
        
def display_courses_by_semester(database, selected_semester):
    print(f"\nCourses in {selected_semester} Semester:")
    semester_courses = [course for course in database if course[1].lower() == selected_semester.lower()]
    
    if not semester_courses:
        print(f"No courses found for {selected_semester} semester.")
        return
    
    for course in semester_courses:
        print(f"{course[0]}; {course[1]}; {course[2]}")
        
def list_courses_by_semester_sorted(database, semester, reverse=False):
    # Filter courses by semester
    semester_courses = [course for course in database if course[1].lower() == semester.lower()]
    # Sort courses by name
    sorted_courses = sorted(semester_courses, key=lambda x: x[0], reverse=reverse)
    print(f"\nCourses in {semester} Semester (Sorted by Course Name {'(Descending)' if reverse else '(Ascending)'}):")
    if not sorted_courses:
        print(f"No courses found for {semester} semester.")
        return
    for course in sorted_courses:
        print(f"{course[0]}; {course[1]}; {course[2]}")
        
        
def add_student_grade(S_database, G_database, grades_file):
    if callable(G_database):
        G_database = G_database()
    last_name = input("Enter student's last name: ").strip()
    # Find matching students
    matching_students = [row for row in S_database if row[1].lower() == last_name.lower()]
    
    if not matching_students:
        print(f"No student with last name {last_name} found.")
        return
    # If multiple students, let user choose
    if len(matching_students) > 1:
        print("Multiple students found:")
        for i, student in enumerate(matching_students, 1):
            print(f"{i}. {student[1]} {student[2]}")
        try:
            choice = int(input("Select student number: ")) - 1
            selected_student = matching_students[choice]
        except (ValueError, IndexError):
            print("Invalid selection.")
            return
    else:
        selected_student = matching_students[0]

    course_code = input("Enter course code (1-4): ").strip()
    if course_code not in ['1', '2', '3', '4']:
        print("Invalid course code. Must be 1, 2, 3, or 4.")
        return
    while True:
        grade = input("Enter grade (0-100 or na): ").strip().upper()
        if grade == 'na':
            break
        
        try:
            grade_value = float(grade)
            if 0 <= grade_value <= 100:
                break
            else:
                print("Invalid grade. Must be between 0 and 100.")
        except ValueError:
            print("Invalid input. Enter a number or na.")
    
    # Find student in grades database
    for row in G_database:
        if row[1].lower() == selected_student[1].lower() and row[2].lower() == selected_student[2].lower():
            grade_index = int(course_code) + 2  
            row[grade_index] = grade
            break
    
    # Write updated grades back to file
    try:
        with open(grades_file, 'w', newline='') as file:
            writer = csv.writer(file, delimiter=';')
            writer.writerows(G_database)
        print("Grade added successfully!")
    except Exception as e:
        print(f"Error writing to file: {e}")
        
        
def update_student_info(database, file_path):
    student_id = input("Enter student ID to update: ").strip()
    student_to_update = None
    student_index = -1
    for index, student in enumerate(database):
        if student[0] == student_id:
            student_to_update = student
            student_index = index
            break
    
    if not student_to_update:
        print(f"No student found with ID {student_id}")
        return
    
    # Display current info
    print("\nCurrent Student Information:")
    print(f"ID: {student_to_update[0]}")
    print(f"Last Name: {student_to_update[1]}")
    print(f"First Name: {student_to_update[2]}")
    print(f"Phone: {student_to_update[3]}")
    print(f"Email: {student_to_update[4]}")
    
    # Update fields
    while True:
        print("\nSelect field to update:")
        print("1. Last Name")
        print("2. First Name")
        print("3. Phone")
        print("4. Email")
        print("0. Exit")
        
        choice = input("Enter your choice: ").strip()
        if choice == "0":
            break
        new_value = input("Enter new value: ").strip()
        
        if choice == "1":
            database[student_index][1] = new_value
        elif choice == "2":
            database[student_index][2] = new_value
        elif choice == "3":
            database[student_index][3] = new_value
        elif choice == "4":
            database[student_index][4] = new_value
        else:
            print("Invalid choice.")
            continue
        
        print("Information updated successfully.")
    
    # Write updated database back to file
    try:
        with open(file_path, 'w', newline='') as file:
            writer = csv.writer(file, delimiter=';')
            writer.writerows(database)
        print("Student information saved.")
    except Exception as e:
        print(f"Error saving updates: {e}")
        
        
def search_course_by_name(database):
    search_term = input("Enter course name to search: ").strip().lower()
    # Find matching courses
    matching_courses = [
        course for course in database 
        if search_term in course[0].lower()
    ]
    if not matching_courses:
        print(f"No courses found matching '{search_term}'.")
        return
    
    print("\nMatching Courses:")
    for course in matching_courses:
        print(f"Course Name: {course[0]}")
        print(f"Semester: {course[1]}")
        print(f"Course Code: {course[2]}")
        print("-" * 30)


def search_course_by_code(database):
    search_code = input("Enter course code (1, 2, 3, or 4): ").strip()
    # Find matching courses
    matching_courses = [
        course for course in database 
        if course[2] == search_code
    ]

    if not matching_courses:
        print(f"No courses found with code {search_code}.")
        return
    
    print("\nMatching Courses:")
    for course in matching_courses:
        print(f"Course Name: {course[0]}")
        print(f"Semester: {course[1]}")
        print(f"Course Code: {course[2]}")
        print("-" * 30)

def search_student_by_lastname(database):
    search_lastname = input("Enter student's last name: ").strip().lower()
    # Find matching students
    matching_students = [
        student for student in database 
        if search_lastname in student[1].lower()
    ]

    if not matching_students:
        print(f"No students found with last name containing '{search_lastname}'.")
        return
    
    print("\nMatching Students:")
    for student in matching_students:
        print(f"ID: {student[0]}")
        print(f"Last Name: {student[1]}")
        print(f"First Name: {student[2]}")
        print(f"Phone: {student[3]}")
        print(f"Email: {student[4]}")
        print("-" * 30)


def search_student_by_phone(database):
    search_phone = input("Enter student's phone number: ").strip()
    # Find matching students
    matching_students = [
        student for student in database 
        if search_phone in student[3]
    ]
    if not matching_students:
        print(f"No students found with phone number containing '{search_phone}'.")
        return
    
    print("\nMatching Students:")
    for student in matching_students:
        print(f"ID: {student[0]}")
        print(f"Last Name: {student[1]}")
        print(f"First Name: {student[2]}")
        print(f"Phone: {student[3]}")
        print(f"Email: {student[4]}")
        print("-" * 30)


def list_student_courses_and_grades(students_db, courses_db, grades_db):
    last_name = input("Enter student's last name: ").strip().lower()
    # Find matching students
    matching_students = [
        student for student in students_db 
        if student[1].lower() == last_name
    ]
    if not matching_students:
        print(f"No student found with last name {last_name}")
        return
    
    # If multiple students, let user choose
    if len(matching_students) > 1:
        print("Multiple students found:")
        for i, student in enumerate(matching_students, 1):
            print(f"{i}. {student[1]} {student[2]}")
        
        try:
            choice = int(input("Select student number: ")) - 1
            selected_student = matching_students[choice]
        except (ValueError, IndexError):
            print("Invalid selection.")
            return
    else:
        selected_student = matching_students[0]
    
    # Find student's grades
    student_grades = None
    for grade_entry in grades_db:
        if (grade_entry[1].lower() == selected_student[1].lower() and 
            grade_entry[2].lower() == selected_student[2].lower()):
            student_grades = grade_entry
            break
    
    if not student_grades:
        print("No grades found for this student.")
        return
    
    # Find course details
    print(f"\nCourses and Grades for {selected_student[1]} {selected_student[2]}:")
    course_codes = ['1', '2', '3', '4']
    
    for i, code in enumerate(course_codes, 1):
        # Find course name for this code
        course_name = next((course[0] for course in courses_db if course[2] == code), f"Course {code}")
        grade = student_grades[i+2]  #Get grade
        print(f"Course {code}: {course_name} - Grade: {grade}")
        

def calculate_student_average(students_db, grades_db):
    last_name = input("Enter student's last name: ").strip().lower()
    # Find matching students
    matching_students = [
        student for student in students_db 
        if student[1].lower() == last_name
    ]
    if not matching_students:
        print(f"No student found with last name {last_name}")
        return
    
    # If multiple students, let user choose
    if len(matching_students) > 1:
        print("Multiple students found:")
        for i, student in enumerate(matching_students, 1):
            print(f"{i}. {student[1]} {student[2]}")
        
        try:
            choice = int(input("Select student number: ")) - 1
            selected_student = matching_students[choice]
        except (ValueError, IndexError):
            print("Invalid selection.")
            return
    else:
        selected_student = matching_students[0]
    
    # Find student's grades
    student_grades = None
    for grade_entry in grades_db:
        if (grade_entry[1].lower() == selected_student[1].lower() and 
            grade_entry[2].lower() == selected_student[2].lower()):
            student_grades = grade_entry
            break
    
    if not student_grades:
        print("No grades found for this student.")
        return
    
    # Calculate average
    grade_columns = student_grades[3:]
    valid_grades = [float(grade) for grade in grade_columns if grade.upper() != 'NA']
    if not valid_grades:
        print("No valid grades to calculate average.")
        return
    
    average = sum(valid_grades) / len(valid_grades)
    
    print(f"\nStudent: {selected_student[1]} {selected_student[2]}")
    print(f"Total Courses: {len(grade_columns)}")
    print(f"Courses with Grades: {len(valid_grades)}")
    print(f"Average Grade: {average:.2f}")
    
def calculate_student_semester_average(students_db, courses_db, grades_db):
    last_name = input("Enter student's last name: ").strip().lower()
    semester = input("Enter semester (Winter/Fall): ").strip().lower()
    # Find matching students
    matching_students = [
        student for student in students_db 
        if student[1].lower() == last_name
    ]
    if not matching_students:
        print(f"No student found with last name {last_name}")
        return
    
    # If multiple students, let user choose
    if len(matching_students) > 1:
        print("Multiple students found:")
        for i, student in enumerate(matching_students, 1):
            print(f"{i}. {student[1]} {student[2]}")
        
        try:
            choice = int(input("Select student number: ")) - 1
            selected_student = matching_students[choice]
        except (ValueError, IndexError):
            print("Invalid selection.")
            return
    else:
        selected_student = matching_students[0]
    
    # Find student's grades
    student_grades = None
    for grade_entry in grades_db:
        if (grade_entry[1].lower() == selected_student[1].lower() and 
            grade_entry[2].lower() == selected_student[2].lower()):
            student_grades = grade_entry
            break
    
    if not student_grades:
        print("No grades found for this student.")
        return
    
    # Find courses for the specific semester
    semester_courses = [
        course for course in courses_db 
        if course[1].lower() == semester
    ]
    
    # Calculate semester average
    semester_grades = []
    for course in semester_courses:
        course_code = course[2]
        grade_index = int(course_code) + 2  
        grade = student_grades[grade_index]
        
        if grade.upper() != 'NA':
            semester_grades.append(float(grade))
    
    if not semester_grades:
        print(f"No valid grades found for {semester} semester.")
        return
    
    average = sum(semester_grades) / len(semester_grades)
    
    print(f"\nStudent: {selected_student[1]} {selected_student[2]}")
    print(f"{semester} Semester")
    print(f"Courses Taken: {len(semester_courses)}")
    print(f"Courses with Grades: {len(semester_grades)}")
    print(f"Semester Average: {average:.2f}")


def calculate_course_average(courses_db, grades_db):
    course_title = input("Enter course title: ").strip().lower()
    # Find matching courses
    matching_courses = [
        course for course in courses_db 
        if course_title in course[0].lower()
    ]
    
    if not matching_courses:
        print(f"No course found with title containing '{course_title}'")
        return
    # If multiple courses, let user choose
    if len(matching_courses) > 1:
        print("Multiple courses found:")
        for i, course in enumerate(matching_courses, 1):
            print(f"{i}. {course[0]} (Semester: {course[1]})")
        
        try:
            choice = int(input("Select course number: ")) - 1
            selected_course = matching_courses[choice]
        except (ValueError, IndexError):
            print("Invalid selection.")
            return
    else:
        selected_course = matching_courses[0]
    # Get course code
    course_code = selected_course[2]
    # Calculate course average
    course_grades = []
    for grade_entry in grades_db:
        grade_index = int(course_code) + 2  # +3 to skip s/n, lastname, firstname, -1 for zero-indexing
        grade = grade_entry[grade_index]
        
        if grade.upper() != 'NA':
            course_grades.append(float(grade))
    
    if not course_grades:
        print(f"No valid grades found for {selected_course[0]}.")
        return
    
    average = sum(course_grades) / len(course_grades)
    
    print(f"\nCourse: {selected_course[0]}")
    print(f"Semester: {selected_course[1]}")
    print(f"Total Students: {len(course_grades)}")
    print(f"Course Average: {average:.2f}")


    
#main        
def main():
    S_database = read_student()
    C_database = read_courses()
    G_database = read_grades
    
    while True:
        print("\nStudent Management System")
        print("1. List all students")
        print("2. List students sorted by name")
        print("3. List all courses")
        print("4. List all courses by semester")
        print("6. Add new entry")
        print("7. Update student info")
        print("8. Search course by name")
        print("9. Search course by code")
        print("10. Search student by last name")
        print("11. Search student by phone")
        print("12. List student courses and grades")
        print("13. Calculate student average")
        print("14. Calculate student term average")
        print("15. Calculate course average")
        print("0. Exit")
        
        choice = input("\nEnter your choice: ")
        
        if choice == "0":
            break
        
        elif choice == "1":
            display_OGstudents(S_database)
            
        elif choice == "2":
            while True:
                try:
                    sort_choice = input("\nSort students? (Y/N): ").strip().upper()
                    if sort_choice != 'Y':
                        break
                
                    reverse_choice = input("Reverse order? (Y/N): ").strip().upper()
                    list_students_sorted(S_database, reverse=(reverse_choice == 'Y'))
            
                except KeyboardInterrupt:
                    print("\nSorting operation cancelled.")
                    break
                
        elif choice == "3":
            display_OGcourses(C_database)
            
        elif choice == "4":
            while True:
                try:
                    semester = input("Enter semester (Winter/Fall) or 'Q' to quit: ").strip()
                
                    if semester.upper() == 'Q':
                        break
                
                    if semester.lower() not in ['winter', 'fall']:
                        print("Invalid semester. Please enter Winter or Fall.")
                        continue
                
                    display_courses_by_semester(C_database, semester)
                
                except KeyboardInterrupt:
                    print("\nOperation cancelled.")
                    break
                
        
        elif choice == "5":  
            while True:
                try:
                    semester = input("Enter semester (Winter/Fall) or 'Q' to quit: ").strip()
            
                    if semester.upper() == 'Q':
                        break
            
                    if semester.lower() not in ['winter', 'fall']:
                        print("Invalid semester. Please enter Winter or Fall.")
                        continue
            
                    sort_choice = input("Sort in (A)scending or (D)escending order? ").strip().upper()
            
                    list_courses_by_semester_sorted( C_database, semester, reverse=(sort_choice == 'D') )
        
                except KeyboardInterrupt:
                    print("\nOperation cancelled.")
                    break
        

        elif choice == "6":
            add_student_grade(S_database, read_grades, grades)
            
        elif choice == "7":
            update_student_info(S_database, students)
            
        elif choice == "8":
            search_course_by_name(C_database)
            
        elif choice == "9":
            search_course_by_code(C_database)
            
        elif choice == "10":
            search_student_by_lastname(S_database)
            
        elif choice == "11":
            search_student_by_phone(S_database)
            
        elif choice == "12":
            list_student_courses_and_grades(S_database, C_database, read_grades())
            
        elif choice == "13":
            calculate_student_average(S_database, read_grades())
            
        elif choice == "14":
            calculate_student_semester_average(S_database, C_database, read_grades())
            
        elif choice == "15":
            calculate_course_average(C_database, read_grades())
    
        else:
            print("Invalid choice. Please try again.")

    
if __name__ == "__main__":
    main()
